/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-MDI.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : MDI
 #	author : miyako
 #	2020/05/29
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-MDI.h"

#pragma mark -

static bool wasMDI;

static bool isSDI() {
    
#if VERSIONWIN
    
    PA_Variable args[5];

    args[0] = PA_CreateVariable(eVK_Longint);
    args[1] = PA_CreateVariable(eVK_Longint);
    args[2] = PA_CreateVariable(eVK_Longint);
    args[3] = PA_CreateVariable(eVK_Longint);
    args[4] = PA_CreateVariable(eVK_Longint);
    
    PA_SetLongintVariable(&args[4], (PA_long32)-1);

    PA_ExecuteCommandByID(443 /*GET WINDOW RECT*/, args, 5);

    return (
       (PA_GetLongintVariable(args[0]) == 0)
    && (PA_GetLongintVariable(args[1]) == 0)
    && (PA_GetLongintVariable(args[2]) == 0)
    && (PA_GetLongintVariable(args[3]) == 0));
    
    /* the variable belongs to 4D, no need to PA_ClearVariable (I think) */

#endif
    
    return false;
}

#if VERSIONWIN

static HWND getMDI() {
    
	wasMDI = true;

    PA_ulong32 version = PA_Get4DVersion();
    
    if (version >= 16)
        return (HWND)PA_GetMainWindowHWND();

    // Altura MAc2Win does not allow multiple instances of the same app
    // we can assume that the window class is the folder name of the application
    
    HWND mdi = NULL;
    wchar_t path[_MAX_PATH] = { 0 };
    wchar_t * applicationPath = wcscpy(path, (const wchar_t *)PA_GetApplicationFullPath().fString);
    
    //remove file name (4D.exe)
    PathRemoveFileSpec(path);
    //check instance as well, to be sure
    HINSTANCE h = (HINSTANCE)PA_Get4DHInstance();
    
    do {
        mdi = FindWindowEx(NULL, mdi, (LPCTSTR)path, NULL);
        if (mdi)
        {
            if (h == (HINSTANCE)GetWindowLongPtr(mdi, GWLP_HINSTANCE))
            {
                break;
            }
        }
    } while (mdi);
    
   return mdi;
}

#endif

#if VERSIONWIN

void OnExit() {
            
        HWND mdi = getMDI();
        
        if (mdi) {

			EnableMenuItem(GetSystemMenu(mdi, FALSE),
				SC_CLOSE,
				MF_BYCOMMAND | MF_ENABLED);
            
            DWORD_PTR ptr;
            HICON hIcon;
            
            wchar_t path[_MAX_PATH] = { 0 };
            wchar_t * applicationPath = wcscpy(path, (const wchar_t *)PA_GetApplicationFullPath().fString);
            
            hIcon = (HICON)ExtractIcon((HINSTANCE)PA_Get4DHInstance(),
                                       (LPCTSTR)applicationPath, 0);
            
            if (!hIcon)
            {
                SHFILEINFO fileinfo;
                if (SHGetFileInfo((LPCTSTR)applicationPath,
                                  0,
                                  &fileinfo,
                                  sizeof(fileinfo),
                                  SHGFI_LARGEICON | SHGFI_ICON))
                {
                    hIcon = fileinfo.hIcon;
                }
            }
            
            if (hIcon)
            {
                SendMessageTimeoutW(mdi,
                                    WM_SETICON,
                                    ICON_SMALL,
                                    (LPARAM)hIcon,
                                    SMTO_NORMAL,
                                    MESSAGE_TIMEOUT_MS,
                                    &ptr);
            }
            
            
        }

}

#endif

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
        
    try
    {
        switch(selector)
        {
            case kDeinitPlugin:
#if VERSIONWIN
				//too late to call isSDI() which depends on PA_ExecuteCommandByID
				if (wasMDI) {
					PA_RunInMainProcess((PA_RunInMainProcessProcPtr)OnExit, NULL);
				}
#endif
                break;
                
                // --- MDI
                
            case 1 :
                if(!isSDI()) {
                    PA_RunInMainProcess((PA_RunInMainProcessProcPtr)MDI_Get_title, params);
                }
                break;
            case 2 :
                if(!isSDI()) {
                    PA_RunInMainProcess((PA_RunInMainProcessProcPtr)MDI_SET_TITLE, params);
                }
                break;
            case 3 :
                if(!isSDI()) {
                    PA_RunInMainProcess((PA_RunInMainProcessProcPtr)MDI_USE_ICON_FILE, params);
                }
                break;
            case 4 :
                if(!isSDI()) {
                    PA_RunInMainProcess((PA_RunInMainProcessProcPtr)MDI_MAXIMIZE, params);
                }
                break;
            case 5 :
                if(!isSDI()) {
                    PA_RunInMainProcess((PA_RunInMainProcessProcPtr)MDI_MINIMIZE, params);
                }
                break;
            case 6 :
                if(!isSDI()) {
                    PA_RunInMainProcess((PA_RunInMainProcessProcPtr)MDI_SET_CLOSE_BOX_ENABLED, params);
                }
                break;
            case 7 :
                if(!isSDI()) {
                    PA_RunInMainProcess((PA_RunInMainProcessProcPtr)MDI_Get_close_box_enabled, params);
                }
                break;
            case 8 :
                if(!isSDI()) {
                    PA_RunInMainProcess((PA_RunInMainProcessProcPtr)MDI_RESTORE, params);
                }
                break;
            case 9 :
                if(!isSDI()) {
                    PA_RunInMainProcess((PA_RunInMainProcessProcPtr)MDI_SET_POSITION, params);
                }
                break;
            case 10 :
                if(!isSDI()) {
                    PA_RunInMainProcess((PA_RunInMainProcessProcPtr)MDI_GET_POSITION, params);
                }
                break;
                
        }
        
    }
    catch(...)
    {
        
    }
    
}

#pragma mark -

void MDI_Get_title(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    
    C_TEXT returnValue;
    
#if VERSIONWIN

    HWND mdi = getMDI();
    
    if (mdi) {
        size_t size = GetWindowTextLength(mdi);
        size++;
        
        std::vector<wchar_t> buf(size);
        size = GetWindowText(mdi, (LPTSTR)&buf[0], size);
        
        returnValue.setUTF16String((const PA_Unichar *)&buf[0], size);
        
    }

#endif

    returnValue.setReturn(pResult);
}

void MDI_SET_TITLE(PA_PluginParameters params) {

    #if VERSIONWIN
            
    HWND mdi = getMDI();
    
    if (mdi) {
        
        C_TEXT Param1;
        
        PackagePtr pParams = (PackagePtr)params->fParameters;
        Param1.fromParamAtIndex(pParams, 1);
        
        SetWindowText(mdi, (LPCTSTR)Param1.getUTF16StringPtr());
        
    }
    
    #endif
}

void MDI_USE_ICON_FILE(PA_PluginParameters params) {

    #if VERSIONWIN
            
    HWND mdi = getMDI();
    
    if (mdi) {
        
        DWORD_PTR ptr;
        
        PackagePtr pParams = (PackagePtr)params->fParameters;
        
        C_TEXT Param1;
        
        Param1.fromParamAtIndex(pParams, 1);
        
        
        HICON hIcon = (HICON)LoadImage(0,
                                       (LPCTSTR)Param1.getUTF16StringPtr(),
                                       IMAGE_ICON,
                                       0,
                                       0,
                                       LR_DEFAULTSIZE | LR_LOADFROMFILE);
        if(hIcon)
        {
            SendMessageTimeoutW(mdi,
                                WM_SETICON,
                                ICON_SMALL,
                                (LPARAM)hIcon,
                                SMTO_NORMAL,
                                MESSAGE_TIMEOUT_MS,
                                &ptr);
        }
        
    }
    
    #endif
}

void MDI_MAXIMIZE(PA_PluginParameters params) {

#if VERSIONWIN
    
    HWND mdi = getMDI();
    
    if (mdi) {
        ShowWindow(mdi, SW_MAXIMIZE);
    }
    
#endif
}

void MDI_MINIMIZE(PA_PluginParameters params) {

#if VERSIONWIN
    
    HWND mdi = getMDI();
    
    if (mdi) {
        ShowWindow(mdi, SW_MINIMIZE);
    }
    
#endif
}

void MDI_SET_CLOSE_BOX_ENABLED(PA_PluginParameters params) {

    #if VERSIONWIN
    
    HWND mdi = getMDI();
    
    if (mdi) {
        
        PackagePtr pParams = (PackagePtr)params->fParameters;
        
        C_LONGINT Param1;
        
        Param1.fromParamAtIndex(pParams, 1);
        
        if(Param1.getIntValue()){
            EnableMenuItem(GetSystemMenu(mdi, FALSE),
                           SC_CLOSE,
                           MF_BYCOMMAND|MF_ENABLED);
        }else{
            EnableMenuItem(GetSystemMenu(mdi, FALSE),
                           SC_CLOSE,
                           MF_BYCOMMAND|MF_GRAYED);
        }
        
    }
            
    #endif
}

void MDI_Get_close_box_enabled(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    
    C_LONGINT returnValue;
    
    #if VERSIONWIN

    HWND mdi = getMDI();
    
    if (mdi) {
        
        UINT state = GetMenuState(GetSystemMenu(mdi, FALSE),
                                  SC_CLOSE,
                                  MF_BYCOMMAND);
        
        returnValue.setIntValue(!(state & (MF_DISABLED|MF_GRAYED)));
        
    }

    #endif
    
    returnValue.setReturn(pResult);
}

void MDI_RESTORE(PA_PluginParameters params) {

    #if VERSIONWIN
            
    HWND mdi = getMDI();
    
    if (mdi) {
        ShowWindow(mdi, SW_RESTORE);
    }

    #endif
}

void MDI_SET_POSITION(PA_PluginParameters params) {
        
    #if VERSIONWIN
    
    HWND mdi = getMDI();
    
    if (mdi) {
        
        PackagePtr pParams = (PackagePtr)params->fParameters;
        
        C_LONGINT insertAfter;
        C_LONGINT x;
        C_LONGINT y;
        C_LONGINT w;
        C_LONGINT h;
        C_LONGINT flags;
        
        insertAfter.fromParamAtIndex(pParams, 1);
        x.fromParamAtIndex(pParams, 2);
        y.fromParamAtIndex(pParams, 3);
        w.fromParamAtIndex(pParams, 4);
        h.fromParamAtIndex(pParams, 5);
        flags.fromParamAtIndex(pParams, 6);
        
        HWND hWndInsertAfter = (HWND)insertAfter.getIntValue();
        
        if((hWndInsertAfter != HWND_BOTTOM)
           && (hWndInsertAfter != HWND_NOTOPMOST)
           && (hWndInsertAfter != HWND_TOP)
           && (hWndInsertAfter != HWND_TOPMOST)){
            //remember, since v1264bits/v14, 4D windowRef is not HWND
            hWndInsertAfter = (HWND)PA_GetHWND((PA_WindowRef)hWndInsertAfter);
        }
        
        SetWindowPos(mdi,
                     hWndInsertAfter,
                     x.getIntValue(),
                     y.getIntValue(),
                     w.getIntValue(),
                     h.getIntValue(),
                     flags.getIntValue());
        
    }
    
    #endif
}

void MDI_GET_POSITION(PA_PluginParameters params) {

    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_LONGINT Param1;
    C_LONGINT Param2;
    C_LONGINT Param3;
    C_LONGINT Param4;
    
    #if VERSIONWIN
            
    HWND mdi = getMDI();
    
    if (mdi) {
        
        RECT rect;
        
        if(GetWindowRect(mdi, &rect))
        {
            Param1.setIntValue(rect.left);
            Param2.setIntValue(rect.top);
            Param3.setIntValue(rect.right - rect.left);
            Param4.setIntValue(rect.bottom - rect.top);
        }
        
    }

    #endif
    
    Param1.toParamAtIndex(pParams, 1);
    Param2.toParamAtIndex(pParams, 2);
    Param3.toParamAtIndex(pParams, 3);
    Param4.toParamAtIndex(pParams, 4);
}
